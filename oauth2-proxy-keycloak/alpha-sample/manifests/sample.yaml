#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:yaml", "yaml")

#@ def labels():
app: sample
heritage: kapp
#@ end

#@ def namespace():
#@ return "default"
#@ end

#@ def config():
#! return "keycloak-proxy-config"
#@ return "gitlab-proxy-config"
#@ end

apiVersion: v1
kind: ServiceAccount
metadata:
  labels: #@ labels()
  name: sample-sa
  namespace: #@ namespace()
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels: #@ labels()
  name: alpha-config
  namespace: #@ namespace()
  annotations:
    kapp.k14s.io/versioned: ""
data:
  oauth2_proxy.yaml: |
    upstreams:
    - id: sample
      uri: http://localhost:8080
      path: "/"
    server:
      bindAddress: "0.0.0.0:4180"
    injectRequestHeaders:
      - name: X-Forwarded-Groups
        values:
          - claim: groups
      - name: X-Forwarded-User
        values:
          - claim: user
      - name: X-Forwarded-Email
        values:
          - claim: email
      - name: X-Forwarded-Preferred-Username
        values:
          - claim: preferred_username
      - name: X-Forwarded-Access-Token
        values:
          - claim: access_token
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels: #@ labels()
  name: gitlab-proxy-config
  namespace: #@ namespace()
  annotations:
    kapp.k14s.io/versioned: ""
data:
  oauth2_proxy.yaml: |
    provider="gitlab"
    scope="openid email profile"
    ssl_insecure_skip_verify=true    
    email_domains=["*"]
    silence_ping_logging=true
    skip_provider_button=true
    cookie_secure=false
    gitlab_groups=["oauth2-test-group"]
    client_id=""
    client_secret=""
    cookie_secret=""
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels: #@ labels()
  name: keycloak-proxy-config
  namespace: #@ namespace()
  annotations:
    kapp.k14s.io/versioned: ""
data:
  oauth2_proxy.yaml: |
    provider="keycloak"
    scope="openid"
    ssl_insecure_skip_verify=true
    email_domains=["*"]
    silence_ping_logging=true
    redirect_url="http://sample.192.168.11.240.nip.io/oauth2/callback"
    cookie_secure=false
    allowed_groups=["/sample","/othergroup"]
    skip_provider_button=true
    oidc_issuer_url="http://keycloak.192.168.11.240.nip.io/auth/realms/demo"
    login_url="http://keycloak.192.168.11.240.nip.io/auth/realms/demo/protocol/openid-onnect/auth"
    redeem_url="http://keycloak.192.168.11.240.nip.io/auth/realms/demo/protocol/openid-connect/token"
    profile_url="http://keycloak.192.168.11.240.nip.io/auth/realms/demo/protocol/openid-connect/userinfo"
    validate_url="http://keycloak.192.168.11.240.nip.io/auth/realms/demo/protocol/openid-connect/userinfo"
    client_id=""
    client_secret=""
    cookie_secret=""
---
apiVersion: v1
kind: Service
metadata:
  labels: #@ labels()
  name: sample
  namespace: #@ namespace()
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector: #@ labels()
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels: #@ labels()
  name: sample
  namespace: #@ namespace()
spec:
  replicas: 1
  selector:
    matchLabels: #@ labels()
  template:
    metadata:
      labels: #@ labels()
    spec:
      serviceAccountName: sample-sa
      containers:
        - name: sample
          image: sample-image
          imagePullPolicy: Always
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            runAsUser: 1000
            runAsGroup: 100
        - name: oauth2-proxy
          image: oauth2-proxy
          imagePullPolicy: Always
          args:
            - --alpha-config=/etc/oauth2_proxy_alpha/oauth2_proxy.yaml
            - --config=/etc/oauth2_proxy/oauth2_proxy.yaml
          ports:
            - containerPort: 4180
              name: http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ping
              port: http
              scheme: HTTP
            initialDelaySeconds: 0
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /ping
              port: http
              scheme: HTTP
            initialDelaySeconds: 0
            timeoutSeconds: 1
            successThreshold: 1
            periodSeconds: 10
          resources: {}
          volumeMounts:
            - mountPath: /etc/oauth2_proxy_alpha
              name: alphaconfig
            - mountPath: /etc/oauth2_proxy
              name: proxyconfig
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 1001
      volumes:
        - configMap:
            defaultMode: 420
            name: alpha-config
          name: alphaconfig
        - configMap:
            defaultMode: 420
            name: #@ config()
          name: proxyconfig
      tolerations: []
---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: sample
  labels: #@ labels()
  namespace: #@ namespace()
spec:
  virtualhost:
    fqdn: #@ data.values.fqdn
  routes:
    - services:
        - name: sample
          port: 80
